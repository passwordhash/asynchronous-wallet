// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/passwordhash/asynchronous-wallet/internal/service/wallet (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_repository.go -package=mocks github.com/passwordhash/asynchronous-wallet/internal/service/wallet Repository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/passwordhash/asynchronous-wallet/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockRepository) GetByID(ctx context.Context, walletID string) (*entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, walletID)
	ret0, _ := ret[0].(*entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoryMockRecorder) GetByID(ctx, walletID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepository)(nil).GetByID), ctx, walletID)
}

// Operation mocks base method.
func (m *MockRepository) Operation(ctx context.Context, walletID string, amount int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Operation", ctx, walletID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Operation indicates an expected call of Operation.
func (mr *MockRepositoryMockRecorder) Operation(ctx, walletID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Operation", reflect.TypeOf((*MockRepository)(nil).Operation), ctx, walletID, amount)
}
